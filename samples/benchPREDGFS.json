{"name":"testPREDGFS","components":[{"name":"SenMLParse.js","source":" /* \n * SenMLParse file adapted from RIoTBench (SenMLParse.java)\n */\n\n//var things = require('things-js');\nvar things = require('things-js')\n\n\n/* configurable variables */\nvar pubsub_url = 'mqtt://localhost';\nvar pubsub_topic = 'thingsjs/IoTBench/SenMLSpout';\nvar publish_topic = 'thingsjs/IoTBench/SenMLParse';\n\nvar pubsub = new things.Pubsub(pubsub_url);\n// mkdir RIOT/ETL folder if not exist \n// save file inside \nfunction processMessage(data) {\n\tvar line = data.toString();\n\t\n\t// Remove everything before first { -- dunno why the data is made like that\n\tvar trimmedLine = line.substr(line.indexOf('{'));\n\t\n\t// JSON-parse object\n\tvar obj = JSON.parse(trimmedLine);\n\t//console.log(obj);\n\t\n\t// What follows is derived from the logic in SenMLParse\n\t// Ensuring compatibility as much as possible so that we can properly\n\t// implement / port the next \"steps\".\n\tvar baseTime = 'bt' in obj ? obj['bt'] : 0;\n\tvar baseUnit = 'bu' in obj ? obj['bu'] : \"\";\n\tvar baseName = 'bn' in obj ? obj['bn'] : \"\";\n\tvar jsonArr = obj['e'];\n\t\n\tvar v,n,u,t;\n\t\n\tvar mapkeyvalues = {};\n\t\n\t//console.log(jsonArr);\n\t\n\tfor (var j=0; j<jsonArr.length; j++) {\n\t\tvar jsonObject = jsonArr[j];\n\t\t//console.log(jsonObject);\n\n\t\tv = 'v' in jsonObject ? jsonObject['v'] : jsonObject['sv'];\n\t\tt = 'v' in jsonObject ? jsonObject['t'] : 0;\n\t\tt += baseTime;\n\n\t\t/* if name does not exist, consider base name */\n\t\tn = 'n' in jsonObject ? jsonObject['n'] : baseName;\n\t\tu = 'u' in jsonObject ? jsonObject['u'] : baseUnit;\n\n\t\tmapkeyvalues[n] = v;\n\t}\n\t\n\t\n\t// Publish the output\n\tconsole.log(mapkeyvalues);\n    pubsub.publish(publish_topic, mapkeyvalues);\n}\n\n/* Connect pubsub */\npubsub.on('ready', function(){\n    \n\t// Subscribe to spout publications\n\tpubsub.subscribe(pubsub_topic, processMessage);\n});\n","count":1,"required_memory":1,"component_id":"5bb1d4b5be784c6c82bff598"},{"name":"SenMLSpout.js","source":"/* \n * Publishes SenML data over pub sub\n */\n\n//var things = require('things-js');\nvar things = require('things-js');\nvar readline = require('readline');\n\n/* configurable variables */\nvar pubsub_url = 'mqtt://localhost';\nvar pubsub_topic = 'thingsjs/IoTBench/SenMLSpout';\nvar publish_interval = 1000;\n\nvar pubsub = new things.Pubsub(pubsub_url);\n\n/* SenML Lines */\nvar lines = [];\nvar currentLine = 0;\n\nfunction startSpout() {\n\tvar lineReader = readline.createInterface({\n\t\tinput: require('fs').createReadStream('TAXI_sample_data_senml.csv')\n\t});\n\n\tlineReader.on('line', function (line) {\n\t\t//console.log('Line from file:', line);\n\t\tlines.push(line);\n\t});\n\n\tlineReader.on('close', function() {\n\t\t// File ended\n\t\tconsole.log('Done reading file... Starting to publish');\n\t\tsetInterval(publishLine, publish_interval);\n\t});\t\n}\n\n/* Publish a SenML line */\nfunction publishLine() {\n\t// For the moment, publish as a raw string rather than json-serializing\n\t// since de-jsoning will be performed by the next 'bolt'\n\tif (currentLine >= lines.length) {\n\t\t/*\n\t\tconsole.log(\"Done sending data.\");\n\t\treturn;\n\t\t*/\n\t   currentLine = 0;\n\t}\n\tconsole.log(\"Publishing line \" + currentLine);\n\tpubsub.publish(pubsub_topic, lines[currentLine]);\n\tcurrentLine++;\n}\n\npubsub.on('ready', function(){\n    console.log(\"Beginning spout\");\n    startSpout();\n});\n\n","count":1,"required_memory":1,"component_id":"5bb1d4d3be784c6c82bff599"},{"name":"DecisionTreePred.js","source":"var fs = require('fs');\nvar csv = require('csv');\nvar C45 = require('c4.5');\nvar things = require('things-js');\nvar mongoUrl = 'mongodb://localhost:27017/things-js-fs';\nvar GFS = require('things-js').addons.gfs(mongoUrl);\n\nvar pubsub_url = 'mqtt://localhost';\nvar pubsub_topic = 'thingsjs/IoTBench/SenMLParse';  \nvar publish_topic = 'thingsjs/IoTBench/TRAIN/DecisionTreePred';\n\nvar pubsub = new things.Pubsub(pubsub_url);\nvar USE_MSG_FIELD_LIST; \nvar SAMPLE_HEADER;\nvar MODEL_FILE_PATH;\nvar MODEL_UPDATE_FREQUENCY;\nvar PRED_RESULT_HEADER;\nvar MODEL_PRED_INPUT;\nvar MODEL_PRED_INPUT_TYPE;\n\n\n\nfunction setup(){\n  var args = process.argv.slice(2);\n  var properties;\n\n  // default to TAXI property set if no specific property file is given\n  if(!args.length){\n    args = ['./TAXI_properties.json'];\n  }\n  // try{\n    GFS.readFile(args[0], function(err2, data){\n        if (err2) {\n          console.log('\\x1b[44m%s\\x1b[0m', 'Couldn\\'t fetch properties: ' + err2);\n          process.exit();\n        }\n      properties = JSON.parse(data);\n      USE_MSG_FIELD_LIST = properties['CLASSIFICATION.DECISION_TREE.USE_MSG_FIELD_LIST'];\n      USE_MSG_FIELD = properties['CLASSIFICATION.DECISION_TREE.USE_MSG_FIELD']||0;\n      SAMPLE_HEADER = properties[\"CLASSIFICATION.DECISION_TREE.SAMPLE_HEADER\"];\n  // change this to fs path \n      MODEL_FILE_PATH = properties['CLASSIFICATION.DECISION_TREE.MODEL_PATH'];\n\n      MODEL_UPDATE_FREQUENCY = properties[\"CLASSIFICATION.DECISION_TREE.TRAIN.MODEL_UPDATE_FREQUENCY\"];\n      PRED_RESULT_HEADER = properties['PREDICT.DECISION_TREE.TARGET'];\n      MODEL_PRED_INPUT = properties['PREDICT.DECISION_TREE.TRAIN_INPUT'];\n      MODEL_PRED_INPUT_TYPE = properties['PREDICT.DECISION_TREE.TRAIN_INPUT_TYPE'];\n\n      console.log(\"USE_MSG_FIELD\" + USE_MSG_FIELD);\n      console.log(\"SAMPLE_HEADER\" + SAMPLE_HEADER);\n      console.log(\"MODEL_FILE_PATH\" + MODEL_FILE_PATH);\n      console.log(\"MODEL_UPDATE_FREQUENCY\" + MODEL_UPDATE_FREQUENCY);\n\n      if(!USE_MSG_FIELD_LIST){\n        console.log('No fields to PRED');\n        process.exit();\n      }\n\n    console.log('Beginning predicting by decisiontree');\n    pubsub.subscribe(pubsub_topic, DecisionTreePred);\n    });   \n}\n\n\nfunction DecisionTreePred(data) {\n    console.log(\" \" + JSON.stringify(data));\n    var processeddata =[];\n    var features = MODEL_PRED_INPUT;\n    features.forEach(function(key) {\n        processeddata.push(data[key]);\n    });\n    console.log(\"parsed data\" + processeddata);\n    \n    var c45 = C45();\n    // use api to read file \n    var state = require(MODEL_FILE_PATH);\n    c45.restore(state);\n    var model = c45.getModel();\n    pubsub.publish(publish_topic, model.classify(processeddata));\n    console.log(\"PREDICT RESULT : \" + model.classify(processeddata));\n\n}\n\n\n\n\n\n\npubsub.on('ready', function(){\n  setup();\n});","count":1,"required_memory":1,"component_id":"5bb1d541be784c6c82bff59b"},{"name":"MultiLinearRegressionPred.js","source":"var fs = require('fs');\nvar csv = require('csv');\nvar MLR  = require('ml-regression-multivariate-linear');\nvar things = require('things-js');\nvar mongoUrl = 'mongodb://localhost:27017/things-js-fs';\nvar GFS = require('things-js').addons.gfs(mongoUrl);\n\nvar pubsub_url = 'mqtt://localhost';\nvar pubsub_topic = 'thingsjs/IoTBench/SenMLParse';  \nvar publish_topic = 'thingsjs/IoTBench/PRED/MultiLinearRegressionPred';\n\nvar pubsub = new things.Pubsub(pubsub_url);\nvar USE_MSG_FIELD_LIST; \nvar SAMPLE_HEADER;\nvar MODEL_FILE_PATH;\nvar MODEL_UPDATE_FREQUENCY;\n\n\n\nfunction setup(){\n  var args = process.argv.slice(2);\n  var properties;\n\n  // default to TAXI property set if no specific property file is given\n  if(!args.length){\n    args = ['./TAXI_properties.json'];\n  }\n  // try{\n    GFS.readFile(args[0], function(err2, data){\n      if (err2) {\n          console.log('\\x1b[44m%s\\x1b[0m', 'Couldn\\'t fetch properties: ' + err2);\n          process.exit();\n        }\n      properties = JSON.parse(data);\n      USE_MSG_FIELD_LIST = properties['PREDICT.MULTIPLELINEAR_REGRESSION.USE_MSG_FIELD_LIST'];\n      USE_MSG_FIELD = properties[\"PREDICT.MULTIPLELINEAR_REGRESSION.USE_MSG_FIELD\"]||0;\n      SAMPLE_HEADER = properties[\"CLASSIFICATION.DECISION_TREE.SAMPLE_HEADER\"];\n      // CHANGE THIS TO FS PATH \n      MODEL_FILE_PATH = properties[\"PREDICT.MULTIPLELINEAR_REGRESSION.MODEL_PATH\"];\n      \n      MODEL_UPDATE_FREQUENCY = properties[\"PREDICT.MULTIPLELINEAR_REGRESSION.TRAIN.MODEL_UPDATE_FREQUENCY\"];\n      PRED_INPUT = properties[\"PREDICT.MULTIPLELINEAR_REGRESSION.TRAIN_INPUT\"];\n      PRED_OUTPUT = properties[\"PREDICT.MULTIPLELINEAR_REGRESSION.TRAIN_OUTPUT\"];\n      PRED_INPUT_TYPE = properties[\"PREDICT.MULTIPLELINEAR_REGRESSION.TRAIN_INPUT_TYPE\"];\n      console.log(\"USE_MSG_FIELD\" + USE_MSG_FIELD);\n      console.log(\"SAMPLE_HEADER\" + SAMPLE_HEADER);\n      console.log(\"MODEL_FILE_PATH\" + MODEL_FILE_PATH);\n      console.log(\"MODEL_UPDATE_FREQUENCY\" + MODEL_UPDATE_FREQUENCY);\n\n      if(!USE_MSG_FIELD_LIST){\n        console.log('No fields to TRAIN');\n        process.exit();\n    }\n    console.log('Beginning prediction by multivariate linear regression');\n    pubsub.subscribe(pubsub_topic, MultiLinearRegressionPred);\n    });  \n   \n  // }\n  // catch(e){\n  //   console.log('Couldn\\'t fetch properties: ' + e);\n  //   process.exit();\n  // }\n}\n\n\nfunction MultiLinearRegressionPred(data) {\n    console.log(\" \" + JSON.stringify(data));\n    var processeddata =[];\n    var features = PRED_INPUT;\n    var target = PRED_OUTPUT;\n    // USE GFS API TO READ THE MODEL OUT \n    GFS.readFile(MODEL_FILE_PATH,function(err,weights){\n    if (err) {\n        console.log('\\x1b[44m%s\\x1b[0m', 'Couldn\\'t fetch model: ' + err);\n        return false;\n      }\n    weights = JSON.parse(weights);\n    console.log(\"FETCHED WEIGHTS\" + weights);\n    features.forEach(function(key) {\n        processeddata.push(Number(data[key]));\n    });\n\n\n\n    processeddata.push(1);\n    \n    var result = 0; \n    var i;\n    for(i = 0; i < processeddata.length;i++){\n        result += processeddata[i]* weights[i]\n      }\n    //publish both predict result and true result;\n    var output_result = {\"predict\":result, \"actual\":data[target]};\n    pubsub.publish(publish_topic, output_result);\n    console.log(\"RESULT : \" + output_result); \n    });\n\n}\n\n\npubsub.on('ready', function(){\n  setup();\n});","count":1,"required_memory":1,"component_id":"5bb1d558be784c6c82bff59c"},{"name":"ResidualError.js","source":"var fs = require('fs');\nvar csv = require('csv');\nvar MLR  = require('ml-regression-multivariate-linear');\nvar things = require('things-js');\nvar mongoUrl = 'mongodb://localhost:27017/things-js-fs';\nvar GFS = require('things-js').addons.gfs(mongoUrl);\n\nvar pubsub_url = 'mqtt://localhost';\nvar pubsub_topic = 'thingsjs/IoTBench/PRED/MultiLinearRegressionPred';  \nvar publish_topic = 'thingsjs/IoTBench/PRED/ResidualError';\n\nvar pubsub = new things.Pubsub(pubsub_url);\n\nvar USE_MSG_FIELD_LIST; \nvar SAMPLE_HEADER;\nvar MODEL_FILE_PATH;\nvar MODEL_UPDATE_FREQUENCY;\n\n\n\nfunction setup(){\n  var args = process.argv.slice(2);\n  var properties;\n\n  // default to TAXI property set if no specific property file is given\n  if(!args.length){\n    args = ['./TAXI_properties.json'];\n  }\n  // try{\n    GFS.readFile(args[0], function(err2, data){\n      if (err2) {\n          console.log('\\x1b[44m%s\\x1b[0m', 'Couldn\\'t fetch properties: ' + err2);\n          process.exit();\n        }\n      properties = JSON.parse(data);\n\n      USE_MSG_FIELD_LIST = properties['PREDICT.MULTIPLELINEAR_REGRESSION.USE_MSG_FIELD_LIST'];\n      USE_MSG_FIELD = properties[\"PREDICT.MULTIPLELINEAR_REGRESSION.USE_MSG_FIELD\"]||0;\n      SAMPLE_HEADER = properties[\"CLASSIFICATION.DECISION_TREE.SAMPLE_HEADER\"];\n      MODEL_FILE_PATH = properties[\"PREDICT.MULTIPLELINEAR_REGRESSION.MODEL_PATH\"];\n      MODEL_UPDATE_FREQUENCY = properties[\"PREDICT.MULTIPLELINEAR_REGRESSION.TRAIN.MODEL_UPDATE_FREQUENCY\"];\n      PRED_INPUT = properties[\"PREDICT.MULTIPLELINEAR_REGRESSION.TRAIN_INPUT\"];\n      PRED_OUTPUT = properties[\"PREDICT.MULTIPLELINEAR_REGRESSION.TRAIN_OUTPUT\"];\n      PRED_INPUT_TYPE = properties[\"PREDICT.MULTIPLELINEAR_REGRESSION.TRAIN_INPUT_TYPE\"];\n      console.log(\"USE_MSG_FIELD\" + USE_MSG_FIELD);\n      console.log(\"SAMPLE_HEADER\" + SAMPLE_HEADER);\n      console.log(\"MODEL_FILE_PATH\" + MODEL_FILE_PATH);\n      console.log(\"MODEL_UPDATE_FREQUENCY\" + MODEL_UPDATE_FREQUENCY);\n\n      if(!USE_MSG_FIELD_LIST){\n        console.log('No fields to TRAIN');\n        process.exit();\n      }\n      console.log('Beginning calculating ResidualError');\n    pubsub.subscribe(pubsub_topic, CalculateRE);\n\n    });   \n\n   \n  // }\n  // catch(e){\n  //   console.log('Couldn\\'t fetch properties: ' + e);\n  //   process.exit();\n  // }\n}\n\n\nfunction CalculateRE(data) {\n    console.log(\" \" + JSON.stringify(data));\n\n    var result = data[\"actual\"] - data[\"predict\"];\n    pubsub.publish(publish_topic, result);\n    console.log(\"ResidualError: \" + result); \n\n}\n\n\npubsub.on('ready', function(){\n  setup();\n});","count":1,"required_memory":1,"component_id":"5bb1d57dbe784c6c82bff59d"},{"name":"Average.js","source":"var things = require('things-js');\nvar fs = require('fs');\nvar mongoUrl = 'mongodb://localhost:27017/things-js-fs';\nvar GFS = require('things-js').addons.gfs(mongoUrl);\n\nvar pubsub_url = 'mqtt://localhost';\nvar pubsub_topic = 'thingsjs/IoTBench/SenMLParse';\nvar publish_topic = 'thingsjs/IoTBench/TRAIN/Average';\n\nvar pubsub = new things.Pubsub(pubsub_url);\n\n/* avg fields */\nvar WINDOW_SIZE = 10;\nvar AVERAGE_TARGET;\nvar datalist;\nfunction setup(){\n\tvar args = process.argv.slice(2);\n\tvar properties;\n\n\t// default to TAXI property set if no specific property file is given\n\tif(!args.length){\n\t\targs = ['./TAXI_properties.json'];\n\t}\n\t\tGFS.readFile(args[0], function(err2, data){\n\t   \t\t if (err2) {\n          \tconsole.log('\\x1b[44m%s\\x1b[0m', 'Couldn\\'t fetch properties: ' + err2);\n         \tprocess.exit();\n        \t}\t\n\t \t\tproperties = JSON.parse(data);\n\t \t\tAVERAGE_TARGET = properties['AVERAGE.MULTIPLELINEAR_REGRESSION'];\n\t \t\taggCount = 0;\n\t\t\tdatalist = [];\n\t\t\taggSum = 0;\n\t \t\tconsole.log('Beginning Average');\n\t\t\tpubsub.subscribe(pubsub_topic, average);\n\t\t});\t\t\n\t\t\n\t// BLOCK_AVG = properties['AGGREGATE.BLOCK_COUNT.WINDOW_SIZE'];\n\t// USE_MSG_FIELD = properties['AGGREGATE.BLOCK_COUNT.USE_MSG_FIELD'] || 0;\n\t// USE_MSG_FIELDLIST = properties['AGGREGATE.BLOCK_COUNT.USE_MSG_FIELD_LIST'];\n\n\n\n\t\n}\n\nfunction average(data){\n\t\taggCount ++;\n\t\tdatalist.push(data);\n\t\tif(aggCount>=WINDOW_SIZE){\n\t\t\tvar tempsum =0\n\t\t\tdatalist.forEach(function(element){\n\t\t\t\tconsole.log(\"LALALALA\" + tempsum);\n\t\t\t\ttempsum += Number(element[AVERAGE_TARGET]);\n\t\t\t});\n\t\t\tvar avg = tempsum/(aggCount+1)\n\t\t\taggCount =0;\n\t\t\tpubsub.publish(publish_topic, avg);\n\t\t\tconsole.log(\"average for fare_amount\" + avg);\n\t\t}\t\t\n\t}\n\n\npubsub.on('ready', function(){\n\tsetup();\n});\n\n","count":1,"required_memory":1,"component_id":"5bb1d50cbe784c6c82bff59a"}]}