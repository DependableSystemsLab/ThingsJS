#! /usr/bin/env node

var fs = require('fs');
var path = require('path');
var program = require('commander');
var jsBeautify = require('js-beautify').js_beautify;

program
  .version('0.0.1')
  .description('Framework for building IoT systems')

program
  .command('dashboard')
  .option('-c, --config <conf_path>', 'Config File Path')
  .alias('dash')
  .description('Start a Dashboard application')
  .action(function(options){
    var config = options.config ? require(options.config) : {};
    var startApp = require('../util/dashboard/startApp.js');
    startApp();
  });

program
  .command('worker <conf>')
  .option('-d, --debug', 'Set environment variable DEBUG to "true" and see debug output')
  .alias('engine')
  .description('Start a ThingsJS Worker')
  .action(function(conf, options){
    process.env['DEBUG'] = options.debug ? "true": "false";
    var things = require('../lib/things.js');
    var config = things.CodeEngine.validateConfig(conf);
    var engine = new things.CodeEngine(config);
    process.on('SIGINT', function(){
      engine.kill().then(function(){
          process.exit();
        })
    });

  });

program
  .command('scheduler <conf>')
  .alias('sched')
  .description('Start a ThingsJS Scheduler')
  .action(function(conf){
    var things = require('../lib/things.js');
    var config = things.CodeEngine.validateConfig(conf);
    // var engine = new things.CodeEngine(config);
    var scheduler = new things.Scheduler(config);
    process.on('SIGINT', function(){
      scheduler.kill().then(function(){
          process.exit();
        })
    });

  });

program
  .command('instrument <file_path>')
  .option('-p, --pubsub <pubsub_url>', 'Pubsub URL')
  .option('-s, --save <save_path>', 'File path to optionally save instrumented code')
  .option('-d, --debug', 'Set environment variable DEBUG to "true" and see debug output')
  .alias('inst')
  .description('Instrument raw JavaScript code to make it migrate-able')
  .action(function(file_path, options){
    process.env['DEBUG'] = options.debug ? "true": "false";
    var things = require('../lib/things.js');
    var pubsub = { url: (options.pubsub_url || 'mqtt://localhost') }; // use a dummy pubsub, no need to connect
    var code = things.Code.fromFile(pubsub, file_path);
    if (options.save) code.save(options.save);
    else console.log(code.source);
  });

program
  .command('restore <file_path>')
  .option('-s, --save <save_path>', 'File path to optionally save instrumented code')
  .option('-d, --debug', 'Set environment variable DEBUG to "true" and see debug output')
  .description('Instrument raw JavaScript code to make it migrate-able')
  .action(function(file_path, options){
    process.env['DEBUG'] = options.debug ? "true": "false";
    var things = require('../lib/things.js');
    var code = things.Code.fromSnapshotFile(file_path, true);
    if (options.save) code.save(options.save);
    else console.log(code.source);
  });

program
  .command('run <file_path>')
  .option('-r, --restore', 'Restore from snapshot and run')
  .option('-p, --pubsub <pubsub_url>', 'Pubsub URL')
  .option('-s, --save <save_path>', 'File path to optionally save instrumented code')
  .option('-d, --debug', 'Set environment variable DEBUG to "true" and see debug output')
  .description('Instrument and run raw JavaScript code.')
  .action(function(file_path, options){
    process.env['DEBUG'] = options.debug ? "true": "false";
    var things = require('../lib/things.js');
    if (options.restore){
      var code = things.Code.fromSnapshotFile(file_path);
    }
    else {
      var pubsub = new things.Pubsub(options.pubsub_url || 'mqtt://localhost');
      var code = things.Code.fromFile(pubsub, file_path);
    }

    if (options.save) code.save(options.save);
    code.run()
    .then(function(instance){
      instance.on('finished', function(){
        code.kill();
        process.exit();
      })
      if(process.stdin.isTTY){
        process.stdin.setRawMode( true );
      }
      process.stdin.setEncoding('utf8');
      process.stdin.on('data', function(key){
        switch(key.trim()){
            case 'p':
                instance.pause();
                break;

            case 'r':
                instance.resume();
                break;

            case 's':
              instance.snapshot(true).then(function(snap){
                console.log(jsBeautify(JSON.stringify(snap)));
                //code.saveLastSnapshot(file_path+'.snap.json')
              })
              break;

            case 'q':
                code.kill();
                process.exit();
                break;

            case '\u0003':
                code.kill();
                process.exit();

            default:
                console.log(key);
        }

      });
    })
    
  });

program
  .command('dispatch <file_path> <pubsub_url> <worker_id>')
  .description('Dispatch code to a worker')
  .action(function(file_path, pubsub_url, worker_id){
    var things = require('../lib/things.js');
    var dispatcher = new things.Dispatcher({ pubsub_url: pubsub_url });
    fs.readFile(file_path, function(err, data){
      if (err) throw err;
      var source = data.toString();
      setTimeout(function(){
        dispatcher.runCode(worker_id, path.basename(file_path), source)
          .then(function(result){
            console.log(">> Running Code ["+result.codeId+"] on CodeEngine ["+result.nodeId+"]");
            process.exit();
          });
      }, 500);

    });
  });

program
  .command('pubsub')
  .option('-p, --port <port>', 'Port to Listen to')
  .option('-d, --debug', 'Set environment variable DEBUG to "true" and see debug output')
  .description('Start a Pubsub Server')
  .action(function(options){
    process.env['DEBUG'] = options.debug ? "true": "false";
    var things = require('../lib/things.js');
    var server = new things.Pubsub.Server();
    process.on('SIGINT', function(){
      server.kill().then(function(){
          process.exit();
        })
    });

  });

program.parse(process.argv);
if (process.argv.length === 2){
  var things = require('../lib/things.js');
  var shell = new things.util.Shell;
}
