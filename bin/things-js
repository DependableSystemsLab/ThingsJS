#! /usr/bin/env node

var path = require('path');
var program = require('commander');

program
  .version('0.0.1')
  .description('Framework for building IoT systems')

program
  .command('dashboard')
  .option('-c, --config <conf_path>', 'Config File Path')
  .alias('dash')
  .description('Start a Dashboard application')
  .action(function(options){
    var app = require('../util/dashboard/application.js');
    app(options.config);
  });

program
  .command('worker <conf>')
  .alias('engine')
  .description('Start a ThingsJS Worker')
  .action(function(conf){
    var things = require('../lib/things.js');
    var config = things.CodeEngine.validateConfig(conf);
    var engine = new things.CodeEngine(config, { logging: 'thingsjs-logs', logInterval: 500 });
    process.on('SIGINT', function(){
      engine.kill().then(function(){
          process.exit();
        })
    });

  });

program
  .command('instrument <file_path>')
  .option('-p, --pubsub <pubsub_url>', 'Pubsub URL')
  .option('-s, --save <save_path>', 'File path to optionally save instrumented code')
  .option('-d, --debug', 'Set environment variable DEBUG to "true" and see debug output')
  .alias('inst')
  .description('Instrument raw JavaScript code to make it migrate-able')
  .action(function(file_path, options){
    process.env['DEBUG'] = options.debug ? "true": "false";
    var things = require('../lib/things.js');
    var pubsub = { url: (options.pubsub_url || 'mqtt://localhost') }; // use a dummy pubsub, no need to connect
    var code = things.Code.fromFile(pubsub, file_path);
    if (options.save) code.save(options.save);
    else console.log(code.source);
  });

program
  .command('run <file_path>')
  .option('-p, --pubsub <pubsub_url>', 'Pubsub URL')
  .option('-s, --save <save_path>', 'File path to optionally save instrumented code')
  .option('-d, --debug', 'Set environment variable DEBUG to "true" and see debug output')
  .description('Instrument and run raw JavaScript code.')
  .action(function(file_path, options){
    process.env['DEBUG'] = options.debug ? "true": "false";
    var things = require('../lib/things.js');
    var pubsub = { url: (options.pubsub_url || 'mqtt://localhost') }; // use a dummy pubsub, no need to connect
    var code = things.Code.fromFile(pubsub, file_path);
    if (options.save) code.save(options.save);
    code.run();
  });

program
  .command('dispatch <file_path> <pubsub_url> <worker_id>')
  .description('Dispatch code to a worker')
  .action(function(file_path, pubsub_url, worker_id){
    var dispatcher = new things.Dispatcher({ pubsub_url: pubsub_url });
        dispatcher.runCode(worker_id, file_path)
        .then(function(result){
          console.log(">> Running Code ["+result.codeId+"] on CodeEngine ["+result.nodeId+"]");
          process.exit();
        });
  });

program.parse(process.argv);
