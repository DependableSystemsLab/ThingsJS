{"meta":{"pubsub":"mqtt://localhost","code_name":"richards.js","instance_id":"richards.js.0","timestamp":1580419741145,"extra":{}},"timers":{"UWxhNrNk2999":{"id":"UWxhNrNk2999","callback":"Σ/BM_Start-0.doRun","timedelta":0,"called_at":1580419741141,"stopped_at":1580419741145,"type":"Immediate"}},"tree":{"name":"Σ","uri":"Σ","hoisted":["runRichards","Scheduler","TaskControlBlock","IdleTask","DeviceTask","WorkerTask","HandlerTask","Packet","BM_Start"],"funcs":{"runRichards":{"type":"Function","value":"function runRichards() {\n        var Σ_runRichards = new Σ.Scope(this, Σ, runRichards, function () {\n            return [\n                {},\n                {\n                    scheduler: scheduler,\n                    queue: queue\n                }\n            ];\n        });\n        var scheduler = new Scheduler();\n        scheduler.addIdleTask(ID_IDLE, 0, null, COUNT);\n        var queue = new Packet(null, ID_WORKER, KIND_WORK);\n        queue = new Packet(queue, ID_WORKER, KIND_WORK);\n        scheduler.addWorkerTask(ID_WORKER, 1000, queue);\n        queue = new Packet(null, ID_DEVICE_A, KIND_DEVICE);\n        queue = new Packet(queue, ID_DEVICE_A, KIND_DEVICE);\n        queue = new Packet(queue, ID_DEVICE_A, KIND_DEVICE);\n        scheduler.addHandlerTask(ID_HANDLER_A, 2000, queue);\n        queue = new Packet(null, ID_DEVICE_B, KIND_DEVICE);\n        queue = new Packet(queue, ID_DEVICE_B, KIND_DEVICE);\n        queue = new Packet(queue, ID_DEVICE_B, KIND_DEVICE);\n        scheduler.addHandlerTask(ID_HANDLER_B, 3000, queue);\n        scheduler.addDeviceTask(ID_DEVICE_A, 4000, null);\n        scheduler.addDeviceTask(ID_DEVICE_B, 5000, null);\n        scheduler.schedule();\n        if (scheduler.queueCount != EXPECTED_QUEUE_COUNT || scheduler.holdCount != EXPECTED_HOLD_COUNT) {\n            var msg = 'Error during execution: queueCount = ' + scheduler.queueCount + ', holdCount = ' + scheduler.holdCount + '.';\n            throw new Error(msg);\n        }\n    }","context":"Σ","proto":{},"properties":{}},"Scheduler":{"type":"Function","value":"function Scheduler() {\n        this.queueCount = 0;\n        this.holdCount = 0;\n        this.blocks = new Array(NUMBER_OF_IDS);\n        this.list = null;\n        this.currentTcb = null;\n        this.currentId = null;\n    }","context":"Σ","proto":{"addIdleTask":{"type":"Function","value":"Σ.α0-0"},"addWorkerTask":{"type":"Function","value":"Σ.α1-1"},"addHandlerTask":{"type":"Function","value":"Σ.α2-2"},"addDeviceTask":{"type":"Function","value":"Σ.α3-3"},"addRunningTask":{"type":"Function","value":"Σ.α4-4"},"addTask":{"type":"Function","value":"Σ.α5-5"},"schedule":{"type":"Function","value":"Σ.α6-6"},"release":{"type":"Function","value":"Σ.α7-7"},"holdCurrent":{"type":"Function","value":"Σ.α8-8"},"suspendCurrent":{"type":"Function","value":"Σ.α9-9"},"queue":{"type":"Function","value":"Σ.α10-10"}},"properties":{}},"TaskControlBlock":{"type":"Function","value":"function TaskControlBlock(link, id, priority, queue, task) {\n        this.link = link;\n        this.id = id;\n        this.priority = priority;\n        this.queue = queue;\n        this.task = task;\n        if (queue == null) {\n            this.state = STATE_SUSPENDED;\n        } else {\n            this.state = STATE_SUSPENDED_RUNNABLE;\n        }\n    }","context":"Σ","proto":{"setRunning":{"type":"Function","value":"Σ.α11-11"},"markAsNotHeld":{"type":"Function","value":"Σ.α12-12"},"markAsHeld":{"type":"Function","value":"Σ.α13-13"},"isHeldOrSuspended":{"type":"Function","value":"Σ.α14-14"},"markAsSuspended":{"type":"Function","value":"Σ.α15-15"},"markAsRunnable":{"type":"Function","value":"Σ.α16-16"},"run":{"type":"Function","value":"Σ.α17-17"},"checkPriorityAdd":{"type":"Function","value":"Σ.α18-18"},"toString":{"type":"Function","value":"Σ.α19-19"}},"properties":{}},"IdleTask":{"type":"Function","value":"function IdleTask(scheduler, v1, count) {\n        this.scheduler = scheduler;\n        this.v1 = v1;\n        this.count = count;\n    }","context":"Σ","proto":{"run":{"type":"Function","value":"Σ.α20-20"},"toString":{"type":"Function","value":"Σ.α21-21"}},"properties":{}},"DeviceTask":{"type":"Function","value":"function DeviceTask(scheduler) {\n        this.scheduler = scheduler;\n        this.v1 = null;\n    }","context":"Σ","proto":{"run":{"type":"Function","value":"Σ.α22-22"},"toString":{"type":"Function","value":"Σ.α23-23"}},"properties":{}},"WorkerTask":{"type":"Function","value":"function WorkerTask(scheduler, v1, v2) {\n        this.scheduler = scheduler;\n        this.v1 = v1;\n        this.v2 = v2;\n    }","context":"Σ","proto":{"run":{"type":"Function","value":"Σ.α24-24"},"toString":{"type":"Function","value":"Σ.α25-25"}},"properties":{}},"HandlerTask":{"type":"Function","value":"function HandlerTask(scheduler) {\n        this.scheduler = scheduler;\n        this.v1 = null;\n        this.v2 = null;\n    }","context":"Σ","proto":{"run":{"type":"Function","value":"Σ.α26-26"},"toString":{"type":"Function","value":"Σ.α27-27"}},"properties":{}},"Packet":{"type":"Function","value":"function Packet(link, id, kind) {\n        this.link = link;\n        this.id = id;\n        this.kind = kind;\n        this.a1 = 0;\n        this.a2 = new Array(DATA_SIZE);\n    }","context":"Σ","proto":{"addTo":{"type":"Function","value":"Σ.α28-28"},"toString":{"type":"Function","value":"Σ.α29-29"}},"properties":{}},"BM_Start":{"type":"Function","value":"function BM_Start() {\n        var Σ_BM_Start = new Σ.Scope(this, Σ, BM_Start, function () {\n            return [\n                {},\n                {\n                    data: data,\n                    elapsed: elapsed,\n                    start: start,\n                    end: end,\n                    i: i\n                }\n            ];\n        }).hoist(doRun, Σ_BM_Start);\n        var data = {\n            runs: 0,\n            elapsed: 0\n        };\n        var elapsed = 0;\n        var start = Date.now();\n        var end = null;\n        var i = 0;\n        function doRun() {\n            BM_SetupFunc();\n            Σ.console.log('Iteration : ' + i);\n            BM_RunFunc();\n            elapsed = Date.now() - start;\n            BM_TearDownFunc();\n            i++;\n            if (i < BM_Iterations) {\n                if (i === BM_Iterations / 2){\n                    Σ.pauseTimers();\n                    var started = Date.now();\n                    var safe = Σ.snapshot();\n                    var elapsed = Date.now() - started;\n                    process.send({ time_taken: elapsed, snapshot: safe });\n                }\n                else Σ.setImmediate(doRun);\n            } else {\n                if (data != null) {\n                    data.runs += i;\n                    data.elapsed += elapsed;\n                }\n                Σ.console.log('Runs: ' + data.runs + '\\t|\\tElapsed: ' + data.elapsed);\n                end = Date.now();\n                Σ.console.log('Total time : ' + (end - start) + ' ms');\n                var usec = data.elapsed * 1000 / data.runs;\n                var rms = BM_RMS ? BM_RMS() : 0;\n                BM_Results.push({\n                    time: usec,\n                    latency: rms\n                });\n                process.exit();\n            }\n        }\n        Σ.setImmediate(doRun);\n    }","context":"Σ","proto":{},"properties":{}},"α0-0":{"type":"Function","value":"function α0(id, priority, queue, count) {\n        this.addRunningTask(id, priority, queue, new IdleTask(this, 1, count));\n    }","context":"Σ","proto":{},"properties":{}},"α1-1":{"type":"Function","value":"function α1(id, priority, queue) {\n        this.addTask(id, priority, queue, new WorkerTask(this, ID_HANDLER_A, 0));\n    }","context":"Σ","proto":{},"properties":{}},"α2-2":{"type":"Function","value":"function α2(id, priority, queue) {\n        this.addTask(id, priority, queue, new HandlerTask(this));\n    }","context":"Σ","proto":{},"properties":{}},"α3-3":{"type":"Function","value":"function α3(id, priority, queue) {\n        this.addTask(id, priority, queue, new DeviceTask(this));\n    }","context":"Σ","proto":{},"properties":{}},"α4-4":{"type":"Function","value":"function α4(id, priority, queue, task) {\n        this.addTask(id, priority, queue, task);\n        this.currentTcb.setRunning();\n    }","context":"Σ","proto":{},"properties":{}},"α5-5":{"type":"Function","value":"function α5(id, priority, queue, task) {\n        this.currentTcb = new TaskControlBlock(this.list, id, priority, queue, task);\n        this.list = this.currentTcb;\n        this.blocks[id] = this.currentTcb;\n    }","context":"Σ","proto":{},"properties":{}},"α6-6":{"type":"Function","value":"function α6() {\n        this.currentTcb = this.list;\n        while (this.currentTcb != null) {\n            if (this.currentTcb.isHeldOrSuspended()) {\n                this.currentTcb = this.currentTcb.link;\n            } else {\n                this.currentId = this.currentTcb.id;\n                this.currentTcb = this.currentTcb.run();\n            }\n        }\n    }","context":"Σ","proto":{},"properties":{}},"α7-7":{"type":"Function","value":"function α7(id) {\n        var Σ_α7 = new Σ.Scope(this, Σ, α7, function () {\n            return [\n                { id: id },\n                { tcb: tcb }\n            ];\n        });\n        var tcb = this.blocks[id];\n        if (tcb == null) {\n            return tcb;\n        }\n        tcb.markAsNotHeld();\n        if (tcb.priority > this.currentTcb.priority) {\n            return tcb;\n        } else {\n            return this.currentTcb;\n        }\n    }","context":"Σ","proto":{},"properties":{}},"α8-8":{"type":"Function","value":"function α8() {\n        this.holdCount++;\n        this.currentTcb.markAsHeld();\n        return this.currentTcb.link;\n    }","context":"Σ","proto":{},"properties":{}},"α9-9":{"type":"Function","value":"function α9() {\n        this.currentTcb.markAsSuspended();\n        return this.currentTcb;\n    }","context":"Σ","proto":{},"properties":{}},"α10-10":{"type":"Function","value":"function α10(packet) {\n        var Σ_α10 = new Σ.Scope(this, Σ, α10, function () {\n            return [\n                { packet: packet },\n                { t: t }\n            ];\n        });\n        var t = this.blocks[packet.id];\n        if (t == null) {\n            return t;\n        }\n        this.queueCount++;\n        packet.link = null;\n        packet.id = this.currentId;\n        return t.checkPriorityAdd(this.currentTcb, packet);\n    }","context":"Σ","proto":{},"properties":{}},"α11-11":{"type":"Function","value":"function α11() {\n        this.state = STATE_RUNNING;\n    }","context":"Σ","proto":{},"properties":{}},"α12-12":{"type":"Function","value":"function α12() {\n        this.state = this.state & STATE_NOT_HELD;\n    }","context":"Σ","proto":{},"properties":{}},"α13-13":{"type":"Function","value":"function α13() {\n        this.state = this.state | STATE_HELD;\n    }","context":"Σ","proto":{},"properties":{}},"α14-14":{"type":"Function","value":"function α14() {\n        return (this.state & STATE_HELD) != 0 || this.state == STATE_SUSPENDED;\n    }","context":"Σ","proto":{},"properties":{}},"α15-15":{"type":"Function","value":"function α15() {\n        this.state = this.state | STATE_SUSPENDED;\n    }","context":"Σ","proto":{},"properties":{}},"α16-16":{"type":"Function","value":"function α16() {\n        this.state = this.state | STATE_RUNNABLE;\n    }","context":"Σ","proto":{},"properties":{}},"α17-17":{"type":"Function","value":"function α17() {\n        var Σ_α17 = new Σ.Scope(this, Σ, α17, function () {\n            return [\n                {},\n                { packet: packet }\n            ];\n        });\n        var packet;\n        if (this.state == STATE_SUSPENDED_RUNNABLE) {\n            packet = this.queue;\n            this.queue = packet.link;\n            if (this.queue == null) {\n                this.state = STATE_RUNNING;\n            } else {\n                this.state = STATE_RUNNABLE;\n            }\n        } else {\n            packet = null;\n        }\n        return this.task.run(packet);\n    }","context":"Σ","proto":{},"properties":{}},"α18-18":{"type":"Function","value":"function α18(task, packet) {\n        if (this.queue == null) {\n            this.queue = packet;\n            this.markAsRunnable();\n            if (this.priority > task.priority) {\n                return this;\n            }\n        } else {\n            this.queue = packet.addTo(this.queue);\n        }\n        return task;\n    }","context":"Σ","proto":{},"properties":{}},"α19-19":{"type":"Function","value":"function α19() {\n        return 'tcb { ' + this.task + '@' + this.state + ' }';\n    }","context":"Σ","proto":{},"properties":{}},"α20-20":{"type":"Function","value":"function α20(packet) {\n        this.count--;\n        if (this.count == 0) {\n            return this.scheduler.holdCurrent();\n        }\n        if ((this.v1 & 1) == 0) {\n            this.v1 = this.v1 >> 1;\n            return this.scheduler.release(ID_DEVICE_A);\n        } else {\n            this.v1 = this.v1 >> 1 ^ 53256;\n            return this.scheduler.release(ID_DEVICE_B);\n        }\n    }","context":"Σ","proto":{},"properties":{}},"α21-21":{"type":"Function","value":"function α21() {\n        return 'IdleTask';\n    }","context":"Σ","proto":{},"properties":{}},"α22-22":{"type":"Function","value":"function α22(packet) {\n        if (packet == null) {\n            if (this.v1 == null) {\n                return this.scheduler.suspendCurrent();\n            }\n            var v = this.v1;\n            this.v1 = null;\n            return this.scheduler.queue(v);\n        } else {\n            this.v1 = packet;\n            return this.scheduler.holdCurrent();\n        }\n    }","context":"Σ","proto":{},"properties":{}},"α23-23":{"type":"Function","value":"function α23() {\n        return 'DeviceTask';\n    }","context":"Σ","proto":{},"properties":{}},"α24-24":{"type":"Function","value":"function α24(packet) {\n        if (packet == null) {\n            return this.scheduler.suspendCurrent();\n        } else {\n            if (this.v1 == ID_HANDLER_A) {\n                this.v1 = ID_HANDLER_B;\n            } else {\n                this.v1 = ID_HANDLER_A;\n            }\n            packet.id = this.v1;\n            packet.a1 = 0;\n            for (var i = 0; i < DATA_SIZE; i++) {\n                this.v2++;\n                if (this.v2 > 26) {\n                    this.v2 = 1;\n                }\n                packet.a2[i] = this.v2;\n            }\n            return this.scheduler.queue(packet);\n        }\n    }","context":"Σ","proto":{},"properties":{}},"α25-25":{"type":"Function","value":"function α25() {\n        return 'WorkerTask';\n    }","context":"Σ","proto":{},"properties":{}},"α26-26":{"type":"Function","value":"function α26(packet) {\n        if (packet != null) {\n            if (packet.kind == KIND_WORK) {\n                this.v1 = packet.addTo(this.v1);\n            } else {\n                this.v2 = packet.addTo(this.v2);\n            }\n        }\n        if (this.v1 != null) {\n            var count = this.v1.a1;\n            var v;\n            if (count < DATA_SIZE) {\n                if (this.v2 != null) {\n                    v = this.v2;\n                    this.v2 = this.v2.link;\n                    v.a1 = this.v1.a2[count];\n                    this.v1.a1 = count + 1;\n                    return this.scheduler.queue(v);\n                }\n            } else {\n                v = this.v1;\n                this.v1 = this.v1.link;\n                return this.scheduler.queue(v);\n            }\n        }\n        return this.scheduler.suspendCurrent();\n    }","context":"Σ","proto":{},"properties":{}},"α27-27":{"type":"Function","value":"function α27() {\n        return 'HandlerTask';\n    }","context":"Σ","proto":{},"properties":{}},"α28-28":{"type":"Function","value":"function α28(queue) {\n        var Σ_α28 = new Σ.Scope(this, Σ, α28, function () {\n            return [\n                { queue: queue },\n                {\n                    peek: peek,\n                    next: next\n                }\n            ];\n        });\n        this.link = null;\n        if (queue == null) {\n            return this;\n        }\n        var peek, next = queue;\n        while ((peek = next.link) != null) {\n            next = peek;\n        }\n        next.link = this;\n        return queue;\n    }","context":"Σ","proto":{},"properties":{}},"α29-29":{"type":"Function","value":"function α29() {\n        return 'Packet';\n    }","context":"Σ","proto":{},"properties":{}},"α30-30":{"type":"Function","value":"function α30() {\n        return Date.now();\n    }","context":"Σ","proto":{},"properties":{}},"α31-31":{"type":"Function","value":"function α31() {\n    }","context":"Σ","proto":{},"properties":{}},"α32-32":{"type":"Function","value":"function α32() {\n    }","context":"Σ","proto":{},"properties":{}}},"params":{},"refs":{"COUNT":1000,"EXPECTED_QUEUE_COUNT":2322,"EXPECTED_HOLD_COUNT":928,"ID_IDLE":0,"ID_WORKER":1,"ID_HANDLER_A":2,"ID_HANDLER_B":3,"ID_DEVICE_A":4,"ID_DEVICE_B":5,"NUMBER_OF_IDS":6,"KIND_DEVICE":0,"KIND_WORK":1,"STATE_RUNNING":0,"STATE_RUNNABLE":1,"STATE_SUSPENDED":2,"STATE_HELD":4,"STATE_SUSPENDED_RUNNABLE":3,"STATE_NOT_HELD":-5,"DATA_SIZE":4,"performance":{"obj_id":"Σ.o0","type":"Object","value":{"now":{"type":"Function","value":"Σ.α30-30"}}},"BM_RunFunc":{"type":"Function","value":"Σ.runRichards"},"BM_SetupFunc":{"type":"Function","value":"Σ.α31-31"},"BM_TearDownFunc":{"type":"Function","value":"Σ.α32-32"},"BM_RMS":{"type":"undefined"},"BM_Iterations":6000,"BM_Min_Iterations":16,"BM_Results":[]},"children":{"BM_Start-0":{"name":"BM_Start","uri":"Σ/BM_Start-0","hoisted":["doRun"],"funcs":{"doRun":{"type":"Function","value":"function doRun() {\n            BM_SetupFunc();\n            Σ.console.log('Iteration : ' + i);\n            BM_RunFunc();\n            elapsed = Date.now() - start;\n            BM_TearDownFunc();\n            i++;\n            if (i < BM_Iterations) {\n                if (i === BM_Iterations / 2){\n                    Σ.pauseTimers();\n                    var started = Date.now();\n                    var safe = Σ.snapshot();\n                    var elapsed = Date.now() - started;\n                    process.send({ time_taken: elapsed, snapshot: safe });\n                }\n                else Σ.setImmediate(doRun);\n            } else {\n                if (data != null) {\n                    data.runs += i;\n                    data.elapsed += elapsed;\n                }\n                Σ.console.log('Runs: ' + data.runs + '\\t|\\tElapsed: ' + data.elapsed);\n                end = Date.now();\n                Σ.console.log('Total time : ' + (end - start) + ' ms');\n                var usec = data.elapsed * 1000 / data.runs;\n                var rms = BM_RMS ? BM_RMS() : 0;\n                BM_Results.push({\n                    time: usec,\n                    latency: rms\n                });\n                process.exit();\n            }\n        }","context":"Σ_BM_Start","proto":{},"properties":{}}},"params":{},"refs":{"data":{"obj_id":"Σ/BM_Start-0.o2","type":"Object","value":{"runs":0,"elapsed":0}},"elapsed":0,"start":1580419730780,"end":null,"i":3000},"children":{},"depth":1}},"depth":2}}